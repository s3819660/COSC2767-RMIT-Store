AWSTemplateFormatVersion: "2010-09-09"
Description: Dev/Test environment with a single EC2 for frontend + backend, and open ports

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Name of an existing EC2 KeyPair for SSH access"

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "ID of an existing VPC (e.g., your default VPC)"

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: "A public subnet within the VPC where the EC2 instance will run"

  SshPubKey:
    Type: String
    Description: "SSH public key of the user who will access the EC2 instance"
    NoEcho: true

  ElasticId:
    Type: String
    Description: "Elastic IP allocation ID to associate with the EC2 instance"

Resources:
  TestDevSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow inbound for dev/test environment"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: test-dev-env-sg

  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !GetAtt TestDevSecurityGroup.GroupId
      ImageId: ami-05576a079321f21f8
      Tags:
        - Key: Name
          Value: test-dev-env-ec2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "sshpubkey ${SshPubKey}"
          useradd ansibleadmin
          echo "ansibleadmin:1234" | chpasswd
          sudo yum install -y docker
          sudo systemctl enable docker
          sudo systemctl start docker
          usermod -aG docker ansibleadmin
          echo "ansibleadmin ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          sudo yum install -y ansible
          sed -i 's/^PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
          systemctl restart sshd
          if [ ! -f /home/ansibleadmin/.ssh/authorized_keys ]; then
            sudo mkdir -p /home/ansibleadmin/.ssh
            sudo echo "${SshPubKey}" > /home/ansibleadmin/.ssh/authorized_keys
          else
            sudo echo "${SshPubKey}" >> /home/ansibleadmin/.ssh/authorized_keys
          fi

          cd /home/ansibleadmin/
          [ ! -d "COSC2767-RMIT-Store" ] && git clone https://github.com/s3819660/COSC2767-RMIT-Store || echo "Directory 'COSC2767-RMIT-Store' already exists"
          git fetch origin && (git show-ref --quiet refs/heads/phuc/integrate_with_test && git checkout phuc/integrate_with_test && git pull origin phuc/integrate_with_test || git checkout -b phuc/integrate_with_test --track origin/phuc/integrate_with_test)

  DevElasticIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !Ref ElasticId
      InstanceId: !Ref DevEC2Instance

Outputs:
  EC2InstanceId:
    Description: "The instance ID of the Dev EC2 1"
    Value: !Ref DevEC2Instance

  ElasticId:
    Description: "Elastic IP ID"
    Value: !Ref ElasticId

  SecurityGroupId:
    Description: "The ID of the security group"
    Value: !GetAtt TestDevSecurityGroup.GroupId

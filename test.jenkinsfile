pipeline {
    agent any

    // app build using java maven -> need install these tools (on Jenkins UI)
    // then also add here as tools need to use
    tools {
        nodejs "NodeJS"
        jdk "JDK 17"
    }

    // identify environment variables
    environment {
        // identify an app (that going to build) name
        APP_NAME = "fe-rmit-store"
        RELEASE = "1.0.0"
        DOCKER_USER = "benhuhaudau"
        DOCKER_CREDENTIALS = "dockerhub-credentials"

        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"       // !!!!! should be this form either can not push !!!!!
        IMAGE_TAG = "${RELEASE}-${env.BUILD_NUMBER}"      // will be updated in another pipeline

        SERVICE_NAME = "${APP_NAME}-service"
        DP_STACK_NAME = "deploy"
        DEVOPS_PROJECT_KEY="devops_project_key_other_account"
        // GIT_BRANCH="phuc/copy_ssh_using_user_data"
        GIT_BRANCH="phuc/deploy_test_server"
        // VPC_ID="vpc-039718b6ccffe8eec"
        VPC_ID="vpc-087ade8aa993e0b95"
        // SUBNET_ID="subnet-03d995dcd4d22e5b9"
        SUBNET_ID="subnet-0cdee2f900148967a"
    }

    stages {
        stage("Clean Workspace") {
            steps {
                cleanWs()
                sh '''
                    docker system prune -f
                    if [ $(docker ps -aq | wc -l) -gt 0 ]; then
                        docker rm -vf $(docker ps -aq)
                    fi
                    if [ $(docker images -aq | wc -l) -gt 0 ]; then
                        docker rmi -f $(docker images -aq)
                    fi
                '''
            }
        }


        // checkout code from source code
        stage("Checkout from SCM"){ 
            steps {
                git branch: "phuc/deploy_test_server", url: "https://github.com/s3819660/COSC2767-RMIT-Store.git"
            }
        }

        stage("Unit Test") {
            steps {
                parallel(
                    "Client": {
                        dir('client') {
                            sh """
                                npm install
                                npm test
                            """
                        }   
                    }
                )
            }
        }

        // create Docker image -> push to Docker Hub -> pull back to build image
        stage("Build & Push Docker images") {
            steps {
                script {
                    parallel(
                        "Client": {
                            dir('client') {
                                docker.withRegistry('', DOCKER_CREDENTIALS) {
                                def clientImage = docker.build("${IMAGE_NAME}-client")
                                clientImage.push("${IMAGE_TAG}")
                                clientImage.push("latest")
                                }
                            }
                        },
                        "Server": {
                            dir('server') {
                                docker.withRegistry('', DOCKER_CREDENTIALS) {
                                def serverImage = docker.build("${IMAGE_NAME}-server")
                                serverImage.push("${IMAGE_TAG}")
                                serverImage.push("latest")
                                }
                            }
                        }
                    )
                }
            }
        }

        // stage("Pull Docker Image") { // New stage added to pull the latest image
        //     steps {
        //         script {
        //             sh """
        //                 docker pull ${IMAGE_NAME}-client:latest
        //                 docker pull ${IMAGE_NAME}-server:latest
        //             """
        //         }
        //     }
        // }

        // stage("Deploy to Swarm") {
        //     steps {
        //         script {
        //             sh "docker stack deploy -c docker-compose.yml ${DP_STACK_NAME}"
        //         }
        //     }
        // }

        stage('CloudFormation Deploy') {
            steps {
                dir('cloudformation') {
                    script {
                        // This code fails ansible connect to ansible workers, please don't uncomment
                        // sh '''
                        //     aws cloudformation delete-stack --stack-name MyDevEnv
                        // '''

                        // // Wait for the stack to be deleted
                        // sh '''
                        //     aws cloudformation wait stack-delete-complete \
                        //         --stack-name MyDevEnv
                        // '''

                        def ssh_pub_key = sh(script: '''
                            sudo cat /home/ansibleadmin/.ssh/id_rsa.pub
                        ''', returnStdout: true).trim()

                        sh """
                            aws cloudformation deploy \
                                --template-file dev-env.yml \
                                --stack-name MyDevEnv \
                                --capabilities CAPABILITY_IAM \
                                --parameter-overrides \
                                    KeyName=devops_project_key_other_account \
                                    VpcId=vpc-087ade8aa993e0b95 \
                                    SubnetId=subnet-0cdee2f900148967a \
                                    SshPubKey='${ssh_pub_key}'
                        """

                        // Wait for the stack to be created
                        sh '''
                            aws cloudformation wait stack-create-complete \
                                --stack-name MyDevEnv
                        '''

                        // Retrieve the stack outputs
                        def stackOutputs = sh(script: '''
                            aws cloudformation describe-stacks \
                                --stack-name MyDevEnv \
                                --query "Stacks[0].Outputs"
                        ''', returnStdout: true).trim()

                        // Parse the outputs to extract values
                        def outputs = readJSON text: stackOutputs

                        // Extract specific output values
                        def ec2PublicIp = outputs.find { it.OutputKey == "EC2PublicIP" }?.OutputValue
                        // Store the values in environment variables for use in subsequent stages
                        env.EC2_PUBLIC_IP = ec2PublicIp
                    }
                }
            }
        }

        stage('Ansible Connect to Worker EC2') {
            steps {
                script {
                    // Add the EC2 instance to the Ansible inventory file
                    sh """
                        sudo echo '[DevServer]
                        ${env.EC2_PUBLIC_IP}' > /etc/ansible/hosts
                    """

                    sh """
                        sudo chmod 777 -R /home/ansibleadmin
                        sudo chmod 777 /home/ansibleadmin/.ssh
                        sudo chmod 777 /home/ansibleadmin/.ssh/known_hosts
                        sudo chmod 777 /home/ansibleadmin/.ssh/id_rsa
                    """

                    sh """
                        sudo -u ansibleadmin whoami
                        sudo -u ansibleadmin ansible -m ping all
                    """

                    // // Add the EC2 instance to the known hosts file
                    // sh """
                    //     if [ ! -f /home/ansibleadmin/.ssh/known_hosts ]; then
                    //         sudo mkdir -p /home/ansibleadmin/.ssh
                    //         sudo ssh-keyscan ${env.EC2_PUBLIC_IP} > /home/ansibleadmin/.ssh/known_hosts
                    //     else
                    //         sudo ssh-keyscan ${env.EC2_PUBLIC_IP} >> /home/ansibleadmin/.ssh/known_hosts
                    //     fi
                    // """

                    // // Copy the SSH key to the remote server
                    // sh """
                    //     sudo ssh-copy-id -i /home/ansibleadmin/.ssh/id_rsa.pub -f ${env.EC2_PUBLIC_IP}
                    // """
                }
            }
        }
        
        stage("Ansible Playbook") {
            steps {
                script {
                    sh '''
                        sudo touch /home/ansibleadmin/PullAndRunFe.yml

                        sudo echo '---
- hosts: DevServer

  tasks:
  - name: create docker image
    command: docker run -d --name fe-container -p 8080:8080 benhuhaudau/fe-rmit-store-client
' > /home/ansibleadmin/PullAndRunFe.yml
                    '''

                    sh '''
                        sudo -u ansibleadmin ansible-playbook /home/ansibleadmin/PullAndRunFe.yml
                    '''
                }
            }
        }
    }

    post {
        failure {
            echo "Build failed"
            // emailext body: "Build failed", subject: "Build failed", to: 'nhannguyen.learn@gmail.com'
        }
    }
}